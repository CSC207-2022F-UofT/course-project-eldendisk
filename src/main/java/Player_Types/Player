package Player_Types;

import java.util.ArrayList;

public abstract class Player implements Character, LevelSystem, CurrencyStstem{

    /* This class initializes all the general player stats and creates the player object,
    * constructor, getters, setters, and other respective methods.*/
    private String name;
    private int HP;
    private int attackDamage;
    private int damageMultiplier;
    private int money;
    private int currEXP;
    private int maxEXP;
    public ArrayList<Object> inventory = new ArrayList<Object>(); //Object will be replaced by item

    public Player(String name, int HP, int attackDamage, int damageMultiplier, int money, int XP,
                  ArrayList<Object> inventory) {
        this.name = name;
        this.HP = HP;
        this.attackDamage = attackDamage;
        this.damageMultiplier = damageMultiplier;
        this.money = money;
        this.currEXP = XP;
        this.maxEXP = 10;
        this.inventory = inventory;
    }
    public Player(String name, int HP, int attackDamage, int damageMultiplier, int money, int XP) {
        this.name = name;
        this.HP = HP;
        this.attackDamage = attackDamage;
        this.damageMultiplier = damageMultiplier;
        this.money = money;
        this.currEXP = XP;
        this.maxEXP = 10;
        this.inventory = new ArrayList<>();
    }

    @Override
    public String getName() {
        return name;
    }
    @Override
    public String getClassName() {
        return ""; //add class attribute to the player classes
    }

    @Override
    public boolean attack(String move, Character characterBeingAttacked) {
        return false; // need to implement moves first
    }
    @Override
    public int getHP() {
        return HP;
    }
    @Override
    public void changeHP(int change) {this.HP = this.getHP() - change; }
    @Override
    public void receiveDamage(String attack) {
        changeHP(3); //value = dmg of attack
    }
    @Override
    public boolean isDead(){
        return this.HP <= 0;
    }



    public void setName(String name) {
        this.name = name;
    }



    public void setHP(int HP) {
        this.HP = HP;
    }

    public int getAttackDamage() {
        return attackDamage;
    }

    public void setAttackDamage(int attackDamage) {
        this.attackDamage = attackDamage;
    }

    public int getDamageMultiplier() {
        return damageMultiplier;
    }

    public void setDamageMultiplier(int damageMultiplier) {
        this.damageMultiplier = damageMultiplier;
    }





    // CurrencySystem implemented for Player class
    @Override
    public void increaseMoney(int numberToIncrease){
        this.money = this.money + numberToIncrease;
    }  // earning from combat or selling items

    @Override
    public void decreaseMoney(int numberToDecrease){
        this.money = this.money + numberToDecrease;
    } // for purchase

    @Override
    public int getCurrMoney() {
        return this.money;
    }
    @Override
    public void setMoney(int money) {
        this.money = money;
    }



    // LevelSystem implemented for Player class
    @Override
    public void levelUp() {
        // precondition ; this.currEXP is always greater than or equal to this.maxEXP
        int remainingExp = this.getCurrExp() - this.getMaxExp();
        this.setCurrExp(remainingExp);
        this.incrementMaxExp();
        this.statGrowth();
    }
    @Override
    public int getCurrExp() {return this.currEXP ;}
    @Override
    public int getMaxExp() {return this.maxEXP;}

    @Override
    public void addExp(int gainedExp) {
        this.currEXP = this.getCurrExp() + gainedExp;
    }
    @Override
    public void setCurrExp(int newEXP) {
        this.currEXP = this.getCurrExp() - this.getMaxExp();
    }
    @Override
    public void incrementMaxExp() {
        this.maxEXP = this.getMaxExp() + 10;
    }

    @Override
    public abstract void statGrowth();

}
